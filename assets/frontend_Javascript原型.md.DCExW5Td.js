import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Dh67Ezso.js";const c=JSON.parse('{"title":"Javascript原型","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/Javascript原型.md","filePath":"frontend/Javascript原型.md","lastUpdated":1740379891000}'),e={name:"frontend/Javascript原型.md"};function r(p,s,l,o,h,k){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="javascript原型" tabindex="-1">Javascript原型 <a class="header-anchor" href="#javascript原型" aria-label="Permalink to &quot;Javascript原型&quot;">​</a></h1><h2 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person1.getName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person2.getName); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="关键疑问" tabindex="-1">关键疑问 <a class="header-anchor" href="#关键疑问" aria-label="Permalink to &quot;关键疑问&quot;">​</a></h2><ol><li>Person.prototype.constructor 指向哪？</li><li>Person.prototype === person1.<strong>proto</strong> // true</li><li>person1.<strong>proto</strong> === Person.prototype // true</li><li>person1.<strong>proto</strong>.constructor === Person // true</li><li>person1.<strong>proto</strong>.constructor.prototype === Person.prototype // true</li><li>person1.<strong>proto</strong> === Person.prototype // true</li><li>person1.<strong>proto</strong>.constructor === Person // true</li><li>person1.<strong>proto</strong>.constructor.prototype === Person.prototype // true</li></ol><h2 id="关键信息" tabindex="-1">关键信息 <a class="header-anchor" href="#关键信息" aria-label="Permalink to &quot;关键信息&quot;">​</a></h2><ol><li>只要创建一个函数,这里的Person也可以叫构造函数 <code>function Person(){}</code></li><li>就会按照特定规则为这个函数创建一个prototype属性,这个prototype属性指向Person的原型对象</li><li>并且<code>Person.prototype.constructor===Person//true</code></li><li><code>const person = new Person()</code>会创建Person的一个实例叫person</li><li>实例内部会有一个特性[[Prototype]]</li><li>实例内部的[[Prototype]]特性性就会赋值为person的构造函数的原型对象也就是Person.prototype</li><li>脚本中没有访问[[Prototype]]的标准方式,FireFox、Safari和Chrome会在每个对象上暴露__proto__属性,但是这个属性不是标准方式,因此建议不要使用这个属性,而是使用Object.getPrototypeOf()方法</li><li><em>重点是实例与构造函数的原型直接有直接的联系，但是实例与构造函数之间没有</em></li></ol>`,7)]))}const E=i(e,[["render",r]]);export{c as __pageData,E as default};
